"""Solution for Day 10: Monitorin Station.

Part 2 stores asteroids as lists sorted by proximity to
monitoring station, in a dict with keys of the angles.
One asteroid is removed per round.
"""
import math

main_input = [
    "..............#.#...............#....#....",
    "#.##.......#....#.#..##........#...#......",
    "..#.....#....#..#.#....#.....#.#.##..#..#.",
    "...........##...#...##....#.#.#....#.##..#",
    "....##....#...........#..#....#......#.###",
    ".#...#......#.#.#.#...#....#.##.##......##",
    "#.##....#.....#.....#...####........###...",
    ".####....#.......#...##..#..#......#...#..",
    "...............#...........#..#.#.#.......",
    "........#.........##...#..........#..##...",
    "...#..................#....#....##..#.....",
    ".............#..#.#.........#........#.##.",
    "...#.#....................##..##..........",
    ".....#.#...##..............#...........#..",
    "......#..###.#........#.....#.##.#......#.",
    "#......#.#.....#...........##.#.....#..#.#",
    ".#.............#..#.....##.....###..#..#..",
    ".#...#.....#.....##.#......##....##....#..",
    ".........#.#..##............#..#...#......",
    "..#..##...#.#..#....#..#.#.......#.##.....",
    "#.......#.#....#.#..##.#...#.......#..###.",
    ".#..........#...##.#....#...#.#.........#.",
    "..#.#.......##..#.##..#.......#.###.......",
    "...#....###...#......#..#.....####........",
    ".............#.#..........#....#......#...",
    "#................#..................#.###.",
    "..###.........##...##..##.................",
    ".#.........#.#####..#...##....#...##......",
    "........#.#...#......#.................##.",
    ".##.....#..##.##.#....#....#......#.#....#",
    ".....#...........#.............#.....#....",
    "........#.##.#...#.###.###....#.#......#..",
    "..#...#.......###..#...#.##.....###.....#.",
    "....#.....#..#.....#...#......###...###...",
    "#..##.###...##.....#.....#....#...###..#..",
    "........######.#...............#...#.#...#",
    "...#.....####.##.....##...##..............",
    "###..#......#...............#......#...#..",
    "#..#...#.#........#.#.#...#..#....#.#.####",
    "#..#...#..........##.#.....##........#.#..",
    "........#....#..###..##....#.#.......##..#",
    ".................##............#.......#..",
]

def angle(point1, point2):
    return math.atan2(point2[1]-point1[1], point2[0] - point1[0])

def parse_input(string_map):
    asteroids = set()
    for i, line in enumerate(string_map):
        asteroids.update({(j, i) for j, c in enumerate(line) if c == "#"})
    return asteroids

def compute_angles(asteroids):
    return {a: len({angle(a, other) for other in asteroids - {a}}) for a in asteroids}

def find_location(asteroids):
    return max(compute_angles(asteroids).values())

def get_best_asteroid(asteroids):
    angles = compute_angles(asteroids)
    best_pos = max(angles, key=lambda k: angles[k])

    # The idea is to use a dict with angles as keys and a sorted list of
    # asteroids per key
    from collections import defaultdict
    vapor = defaultdict(list)
    for asteroid in asteroids - {best_pos}:
        vapor[round(angle(best_pos, asteroid), 4)].append(asteroid)

    vapor = {k: sorted(v, key=lambda x: abs(best_pos[1]-x[1]) + abs(best_pos[0]-x[0])) for k, v in vapor.items()}

    vapor_keys = sorted(vapor)
    theta = -1.5708
    i = vapor_keys.index(theta)
    count = 0
    while vapor:
        if vapor[theta]:
            a = vapor[theta].pop(0)
            count += 1
            if count == 200:
                return a[0]*100 + a[1]
        i = (i + 1) % len(vapor)
        theta = vapor_keys[i]

inputs = parse_input(main_input)
print(find_location(inputs))
print(get_best_asteroid(inputs))

test1 = [
    ".#..#",
    ".....",
    "#####",
    "....#",
    "...##",
]
test2 = [
    "......#.#.",
    "#..#.#....",
    "..#######.",
    ".#.#.###..",
    ".#..#.....",
    "..#....#.#",
    "#..#....#.",
    ".##.#..###",
    "##...#..#.",
    ".#....####",
]
test3 = [
    "#.#...#.#.",
    ".###....#.",
    ".#....#...",
    "##.#.#.#.#",
    "....#.#.#.",
    ".##..###.#",
    "..#...##..",
    "..##....##",
    "......#...",
    ".####.###.",
]
test4 = [
    ".#..#..###",
    "####.###.#",
    "....###.#.",
    "..###.##.#",
    "##.##.#.#.",
    "....###..#",
    "..#.#..#.#",
    "#..#.#.###",
    ".##...##.#",
    ".....#.#..",
]
test5 = [
    ".#..##.###...#######",
    "##.############..##.",
    ".#.######.########.#",
    ".###.#######.####.#.",
    "#####.##.#.##.###.##",
    "..#####..#.#########",
    "####################",
    "#.####....###.#.#.##",
    "##.#################",
    "#####.##.###..####..",
    "..######..##.#######",
    "####.##.####...##..#",
    ".#####..#.######.###",
    "##...#.##########...",
    "#.##########.#######",
    ".####.#.###.###.#.##",
    "....##.##.###..#####",
    ".#.#.###########.###",
    "#.#.#.#####.####.###",
    "###.##.####.##.#..##",
]

assert 8 == find_location(parse_input(test1))
assert 33 == find_location(parse_input(test2))
assert 35 == find_location(parse_input(test3))
assert 41 == find_location(parse_input(test4))
assert 210 == find_location(parse_input(test5))
assert 802 == get_best_asteroid(parse_input(test5))
